{"ast":null,"code":"var _jsxFileName = \"/Users/David/Desktop/bootcamp2/Project-3/client/src/pages/SavedProperties.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { GET_ME } from '../utils/queries';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { REMOVE_PROPERTY } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removePropertyId } from '../utils/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SavedProperties = () => {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_ME); // const [removeProperty] = useMutation(REMOVE_PROPERTY); //!!!!!!!!!!!!!\n  // const userData = data?.me || [];\n  // create function that accepts the propertie's mongo _id value as param and deletes the property from the database\n  // const handleDeleteProperty = async (propertyId) => {\n  //   const token = Auth.loggedIn() ? Auth.getToken() : null;\n  //   if (!token) return false;\n  //   try {\n  //     await removeProperty({\n  //       variables: {propertyId}\n  //     })\n  //     //only triggers if the removeProperty mutation is successful\n  //     removePropertyId(propertyId);\n  //   } catch (e) {\n  //     console.log(e);\n  //   }\n  // };\n  // if data isn't here yet, say so\n  // if (loading) return <h2>LOADING RESULTS...</h2>\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Viewing saved properties\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SavedProperties, \"hTtb9+9Ejj4LaeiCcO4d0qPsxv8=\", false, function () {\n  return [useQuery];\n});\n\n_c = SavedProperties;\nexport default SavedProperties;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavedProperties\");","map":{"version":3,"names":["React","useState","useEffect","Jumbotron","Container","CardColumns","Card","Button","GET_ME","useQuery","useMutation","REMOVE_PROPERTY","Auth","removePropertyId","SavedProperties","loading","data"],"sources":["/Users/David/Desktop/bootcamp2/Project-3/client/src/pages/SavedProperties.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\nimport {GET_ME} from '../utils/queries';\r\nimport {useQuery, useMutation} from '@apollo/react-hooks';\r\nimport { REMOVE_PROPERTY } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\nimport { removePropertyId } from '../utils/localStorage';\r\n\r\nconst SavedProperties = () => {\r\n  const {loading, data} = useQuery(GET_ME);\r\n  // const [removeProperty] = useMutation(REMOVE_PROPERTY); //!!!!!!!!!!!!!\r\n  // const userData = data?.me || [];\r\n\r\n  // create function that accepts the propertie's mongo _id value as param and deletes the property from the database\r\n  // const handleDeleteProperty = async (propertyId) => {\r\n  //   const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n  //   if (!token) return false;\r\n\r\n  //   try {\r\n  //     await removeProperty({\r\n  //       variables: {propertyId}\r\n  //     })\r\n\r\n  //     //only triggers if the removeProperty mutation is successful\r\n  //     removePropertyId(propertyId);\r\n  //   } catch (e) {\r\n  //     console.log(e);\r\n  //   }\r\n  // };\r\n\r\n  // if data isn't here yet, say so\r\n  // if (loading) return <h2>LOADING RESULTS...</h2>\r\n\r\n  return (\r\n    <>\r\n      <div fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved properties</h1>\r\n        </Container>\r\n      </div>\r\n      {/* <Container>\r\n        <h2>\r\n          {userData.savedProperties.length\r\n            ? `Viewing ${userData.savedProperties.length} saved ${userData.savedProperties.length === 1 ? 'properties' : 'properties'}:`\r\n            : 'You have no saved properties!'}\r\n        </h2>\r\n        <div>\r\n          {userData.savedProperties.map((property) => {\r\n            return (\r\n              <Card key={property.propertyId} border='dark'>\r\n                {property.image ? <Card.Img src={property.image} alt={`The cover for ${property.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{property.title}</Card.Title>\r\n                  <p className='small'>Authors: {property.authors}</p>\r\n                  <Card.Text>{property.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteProperty(property.propertyId)}>\r\n                    Delete this Property!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </div>\r\n      </Container> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedProperties;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,IAA5C,EAAkDC,MAAlD,QAAgE,iBAAhE;AACA,SAAQC,MAAR,QAAqB,kBAArB;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,qBAApC;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,gBAAT,QAAiC,uBAAjC;;;;AAEA,MAAMC,eAAe,GAAG,MAAM;EAAA;;EAC5B,MAAM;IAACC,OAAD;IAAUC;EAAV,IAAkBP,QAAQ,CAACD,MAAD,CAAhC,CAD4B,CAE5B;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;;EAEA,oBACE;IAAA,uBACE;MAAK,KAAK,MAAV;MAAW,SAAS,EAAC,oBAArB;MAAA,uBACE,QAAC,SAAD;QAAA,uBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAiCD,CA1DD;;GAAMM,e;UACoBL,Q;;;KADpBK,e;AA4DN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode'; // create a new class to instantiate for a user\n\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  } // check if user's logged in\n\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  } // check if token is expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token'); // this will reload the page and reset the state of the application\n\n    window.location.assign('/');\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["/Users/David/Desktop/bootcamp2/Project-3/client/src/utils/auth.js"],"sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,YAAnB,C,CAEA;;AACA,MAAMC,WAAN,CAAkB;EAChB;EACAC,UAAU,GAAG;IACX,OAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;EACD,CAJe,CAMhB;;;EACAC,QAAQ,GAAG;IACT;IACA,MAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd;IACA,OAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB,CAHS,CAGsC;EAChD,CAXe,CAahB;;;EACAC,cAAc,CAACD,KAAD,EAAQ;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;MACA,IAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;QACnC,OAAO,IAAP;MACD,CAFD,MAEO,OAAO,KAAP;IACR,CALD,CAKE,OAAOC,GAAP,EAAY;MACZ,OAAO,KAAP;IACD;EACF;;EAEDR,QAAQ,GAAG;IACT;IACA,OAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;EACD;;EAEDC,KAAK,CAACC,OAAD,EAAU;IACb;IACAH,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;IACAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;EAEDC,MAAM,GAAG;IACP;IACAR,YAAY,CAACS,UAAb,CAAwB,UAAxB,EAFO,CAGP;;IACAJ,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;AAzCe;;AA4ClB,eAAe,IAAIlB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}